@page "/login"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthStateProvider
@using System.Net.Http.Json
@using BlazorFrontend.Providers
@using Labb2Webb.Shared.Models
@using Microsoft.AspNetCore.Components.Authorization

<PageTitle>ynet Login</PageTitle>

<div class="container mt-5 pt-5">
    <div>
        <h2 class="align-content-center">Login</h2>
    </div>
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }
    <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="inputEmail1">Email address</label>
            <InputText id="inputEmail1" class="form-control" @bind-Value="loginModel.Email" placeholder="Enter email" />
            <small id="emailHelp" class="form-text text-muted">We'll never share your email with anyone else.</small>
        </div>

        <div class="form-group">
            <label for="inputPassword1">Password</label>
            <InputText id="inputPassword1" class="form-control" @bind-Value="loginModel.Password" type="password" placeholder="Password" />
        </div>
        <button type="submit" class="btn btn-primary">Login</button>
    </EditForm>

    <a href="/createaccount" class="px-5 ">Create an Account</a>

</div>

@code {
    private LoginModel loginModel = new();
    private string errorMessage;

    private async Task HandleLogin()
    {
        errorMessage = null;
        try
        {
            var response = await Http.PostAsJsonAsync("api/auth/login", loginModel);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResponse>();
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "authToken", result.Token);

                if (AuthStateProvider is CustomAuthStateProvider customAuthProvider)
                {
                    customAuthProvider.MarkUserAsAuthenticated(loginModel.Email);
                }

                Navigation.NavigateTo("/");
            }
            else
            {
                errorMessage = "Invalid credentials, please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }

    public class LoginResponse
    {
        public string Token { get; set; }
    }
}