@using Labb2Webb.Shared.DTOs
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@inject ProductService ProductService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@page "/admin/products"
@attribute [Authorize(Roles = "Admin")]

<AuthorizeView Roles="Admin" Context="auth">
    <Authorized>
<h3>Admin: Products</h3>

<button class="btn btn-success mb-3" @onclick="@(() => Navigation.NavigateTo("/admin/products/create"))">
    Add New Product
</button>

@if (products == null)
{
    <p>Loading...</p>
}else {
    <table class="table table-dark table-striped">
        <thead>
            <tr>
                <th>Name</th>
                <th>Category</th>
                <th>Status</th>
                <th>Price</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td>@product.ProductName</td>
                    <td>@product.ProductCategory</td>
                    <td>@product.Status</td>
                    <td>$@product.Price</td>
                    <td>
                        <button class="btn btn-primary btn-sm me-1" @onclick="@(() => Navigation.NavigateTo($"/admin/products/edit/{product.Id}"))">Edit</button>
                        <button class="btn btn-danger btn-sm" @onclick="@(() => MarkAsDiscontinued(product.Id))">Discontinue</button>
                        <button class="btn btn-outline-danger btn-sm" @onclick="@(() => DeleteProduct(product.Id))">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
    </Authorized>
    <NotAuthorized>
        <h4>Access Denied</h4>
        <p>You are not authorized to access this area.</p>
    </NotAuthorized>
</AuthorizeView>
@code {
    private IEnumerable<ProductDto> products;

    [Inject] private AuthenticationStateProvider AuthProvider { get; set; }

    protected override async Task OnInitializedAsync()
    {
        products = (await ProductService.GetAllProductsAsync()).ToList();
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (!user.Identity.IsAuthenticated || !user.IsInRole("Admin"))
        {
            Navigation.NavigateTo("/not-authorized");
        }
    }


    private async Task MarkAsDiscontinued(int id)
    {
        await ProductService.MarkAsDiscontinued(id);
        products = (await ProductService.GetAllProductsAsync()).ToList();
    }

    private async Task DeleteProduct(int id)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this product?");
        if (!confirmed)
            {
                return;
            }

        await ProductService.DeleteProductAsync(id);
        products = (await ProductService.GetAllProductsAsync()).ToList();
    }
}
